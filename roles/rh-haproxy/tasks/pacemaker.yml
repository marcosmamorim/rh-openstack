---
#- name: Get Current DC
#  shell: pcs status cluster | awk '/^ Current DC:/ {print $3}'
#  register: pacemaker_dc
#  ignore_errors: True
#  no_log: True
#  tags:
#    - pacemaker
#    - pacemaker-haproxy

- name: create haproxy cluster resource
  when: ansible_hostname == pacemaker_dc.stdout
  pcs_resource: command=create resource_id=haproxy type=systemd:haproxy
  tags:
    - pacemaker
    - pacemaker-haproxy
  args:
    options:
    operations:
      - action: monitor
        options:
          interval: 10s
      - action: start
        options:
          timeout: 60s

- name: clone haproxy pacemaker
  command: pcs resource clone haproxy
  tags:
    - pacemaker
    - pacemaker-haproxy

- name: create constraint
  command: pcs constraint colocation add vip-db haproxy-clone INFINITY
  ignore_errors: True
  register: command_result
  when: ansible_hostname == pacemaker_dc.stdout
  failed_when: "'FAILED' in command_result.stderr"
  tags:
    - pacemaker
    - pacemaker-haproxy

- name: create order constraint
  command: pcs constraint order vip-db then haproxy-clone kind=Optional
  ignore_errors: True
  when: ansible_hostname == pacemaker_dc.stdout
  failed_when: "'FAILED' in command_result.stderr"
  tags:
    - pacemaker
    - pacemaker-haproxy


#
#- name: pause to resources pcs in nodes
#  pause: seconds=10
#  tags: haproxy
#
#- name: create pacemaker controlled VIP addresses
#  pcs_resource: command=create name={{ item.name }} type=IPaddr2
#  args:
#    options:
#      ip: "{{ item.addr }}"
#  with_items: vip_addresses
#  run_once: true
#  tags: haproxy
#
#- name: create constraint
#  command: pcs constraint colocation add vip-db haproxy-clone INFINITY
#  ignore_errors: True
#  register: command_result
#  failed_when: "'FAILED' in command_result.stderr"
#  tags: haproxy
#
#- name: create order constraint
#  command: pcs constraint order vip-db then haproxy-clone kind=Optional
#  ignore_errors: True
#  register: command_result
#  failed_when: "'FAILED' in command_result.stderr"
#  tags: haproxy
