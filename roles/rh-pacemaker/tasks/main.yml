---
- name: Ensure cluster group membership
  fail: msg="Cluster hosts must be members of a group"
  when: pacemaker_ansible_group is not iterable

- name: Install Pacemaker Configuration System package
  yum: name={{ pacemaker_package }} state=installed

- name: Start PCS daemon
  command: systemctl start pcsd

- name: Enable PCS daemon
  command: systemctl enable pcsd

- name: Ensure the password for the cluster use
  user:
    name="{{ pacemaker_user }}"
    password="{{ pacemaker_password }}"

- name: Authenticate all nodes
  command: >
    pcs cluster auth
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
    -u {{ pacemaker_user }} -p {{ pacemaker_password }}
  run_once: true
  args:
    creates: /var/lib/pcsd/tokens

- name: Setup cluster message bus
  run_once: true
  command: >
    pcs cluster setup --name {{ pacemaker_cluster_name }}
    {% for host in groups[pacemaker_ansible_group] %}
    {{ hostvars[host]['ansible_hostname'] }}
    {% endfor %}
  args:
    creates: /etc/corosync/corosync.conf

- name: Start all cluster nodes
  service: name={{ item }} enabled=yes state=started
  with_items:
    - corosync
    - pacemaker

- name: Set cluster properties
  run_once: true
  command: pcs property set {{ item.key | replace('_', '-') }}={{ item.value }}
  with_dict: "{{ pacemaker_properties }}"
  when: pacemaker_properties is defined

- name: Create resources
  run_once: true
  when: pacemaker_resources is defined
  with_items: "{{ pacemaker_resources }}"
  command: >
    pcs resource create {{ item.id }} {{ item.type }}
    {% if item.options is defined %}
      {% for opt, value in item.options.iteritems() %}
        {{ opt }}={{ value }}
      {% endfor %}
    {% endif %}
    {% if item.op is defined %}
      op
      {% for op in item.op %}
        {{ op.action }}
        {% for opt, value in op.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {% if item.meta is defined %}
      meta {{ item.meta.id }}
      {% if item.meta.options is defined %}
        {% for opt, value in item.meta.options.iteritems() %}
          {{ opt }}={{ value }}
        {% endfor %}
      {% endif %}
    {% endif %}
    {% if item.clone is defined %}
      {% if item.clone %} --clone {% endif %}
    {% elif item.masterslave is defined %}
      --master
      {% if item.masterslave.name is defined %}
        {{ item.masterslave.name }}
      {% endif %}
    {% elif item.group is defined %}
      --group {{ item.group.name }}
      {% if item.group.before is defined %}
        --before {{ item.group.before }}
      {% elif item.group.after is defined %}
        --after {{ item.group.after }}
      {% endif %}
    {% endif %}
    {% if item.disabled is defined %}
      {% if item.disabled %} --disabled {% endif %}
    {% endif %}
    {% if item.wait is defined %}
      wait={{ item.wait }}
    {% endif %}
