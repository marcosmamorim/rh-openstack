---
# TODO: Check constraints and location
- name: stop and disable nova services
  service: name={{ item }} state=stopped enabled=no
  with_items:
    - nova-scheduler
    - nova-api
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
  ignore_errors: True

- name: create nova cluster resources
  pcs_resource: command=create resource_id={{ item }} type=systemd:openstack-{{ item }} clone=yes
  args:
    options:
    operations:
      - action: monitor
        options:
          interval: 10s
      - action: start
        options:
          timeout: 100s
  when: ansible_hostname == master_server
  with_items:
    - nova-scheduler
    - nova-api
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy

# Colocation
#<rsc_order first="openstack-nova-scheduler-clone" first-action="start" id="order-openstack-nova-scheduler-clone-openstack-nova-conductor-clone-mandatory" then="openstack-nova-conductor-clone" then-action="start"/>
- name: create nova-scheduler constraint
  command: pcs constraint order nova-scheduler-clone then nova-conductor-clone kind=Optional
  when: ansible_hostname == master_server

#<rsc_order first="openstack-nova-consoleauth-clone" first-action="start" id="order-openstack-nova-consoleauth-clone-openstack-nova-novncproxy-clone-mandatory" then="openstack-nova-novncproxy-clone" then-action="start"/>
- name: create nova-consoleauth constraint
  command: pcs constraint order nova-consoleauth-clone then nova-novncproxy-clone kind=Optional
  when: ansible_hostname == master_server

#<rsc_order first="openstack-nova-novncproxy-clone" first-action="start" id="order-openstack-nova-novncproxy-clone-openstack-nova-api-clone-mandatory" then="openstack-nova-api-clone" then-action="start"/>
- name: create nova-novncproxy-clone constraint
  command: pcs constraint order nova-novncproxy-clone then nova-api-clone kind=Optional
  when: ansible_hostname == master_server

#<rsc_colocation id="colocation-openstack-nova-scheduler-clone-openstack-nova-api-clone-INFINITY" rsc="openstack-nova-scheduler-clone" score="INFINITY" with-rsc="openstack-nova-api-clone"/>
- name: create constraint colocation nova-scheduler
  command: pcs constraint colocation add nova-scheduler-clone nova-api-clone INFINITY
  ignore_errors: True
  register: command_result
  when: ansible_hostname == master_server
  failed_when: "'FAILED' in command_result.stderr"

#<rsc_colocation id="colocation-openstack-nova-api-clone-openstack-nova-novncproxy-clone-INFINITY" rsc="openstack-nova-api-clone" score="INFINITY" with-rsc="openstack-nova-novncproxy-clone"/>
- name: create constraint colocation nova-api
  command: pcs constraint colocation add nova-api-clone nova-novncproxy-clone INFINITY
  ignore_errors: True
  register: command_result
  when: ansible_hostname == master_server
  failed_when: "'FAILED' in command_result.stderr"

#- name: restart nova after configuration
#  command: pcs resource restart {{ item }}
#  when: ansible_hostname == master_server
#  with_items:
#  - nova-scheduler
#  - nova-api
#  - nova-conductor
#  - nova-consoleauth
#  - nova-novncproxy
